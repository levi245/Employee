@page "/employees/add-skill{Id:int}"
@using System.Text.Json.Nodes
@using EmployeeUI.DTO
@inject HttpClient Http
@inject NavigationManager NavigationManager

@using System.Net.Http.Json


<div class="container mt-5">
    <div class="row">
        <div class="col-lg-8">
            <h1 class="mb-5"> Assign Skill</h1>


           

            <div class="row mb-3">
                <InputSelect @bind-Value="@skills" class="form-select">
                    <option value="">-- Select Skill --</option>
                    @foreach (var skill in skills)
                    {
                        <option value="@skill.SkillId">@skill.SkillName</option>
                    }
                </InputSelect>
            </div>
            <div class="row mb-3">
                <select class="form-select" aria-label="Default select example">
                    <option selected>Open this select menu</option>
                    <option value="1">Beginner</option>
                    <option value="2">Intermediate</option>
                    <option value="3">Advance</option>
                </select>
            </div>
            <div class="row">
                <div class="row">
                    <div class="offset-md-4 col-md-4 d-grid">
                        <button class="btn btn-primary" @onclick="SaveEmployee">Submit</button>
                    </div>
                </div>
                <div class="col-md-4 d-grid">
                    <a class="btn btn-secondary d-grid col-md-4" href="/employees">Cancel</a>
                </div>
            </div>
        </div>
    </div>
</div>




@code {
 
    [Parameter]
    public int Id { get; set; }
    public Employee employee { get; set; } = new Employee();
    public EmployeeDto employeedata { get; set; } = new EmployeeDto();
    public JsonNode errors { get; set; } = new JsonObject();
    private List<DTO.SkillDto>? skills;

    protected override async Task OnInitializedAsync()
    {
        
        try
        {
            employee = await Http.GetFromJsonAsync<Employee>($"https://localhost:7211/api/Employee/{Id}");
            employeedata.FullName = employee?.FullName ?? "";
            employeedata.HiredOn = employee.HiredOn;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching employee data: {ex.Message}");
        }
        skills = await Http.GetFromJsonAsync<List<DTO.SkillDto>>("https://localhost:7211/api/Skill");
    }

    protected async Task SaveEmployee()
    {
        try
        {
            var response = await Http.PutAsJsonAsync("https://localhost:7211/api/Employee/" + Id, employeedata);
            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/employees");
            }

            else
            {
                var strResponse = await response.Content.ReadAsStringAsync();
                //errors = await response.Content.ReadFromJsonAsync<JsonNode>();

                try
                {
                    var jsonResponse = JsonNode.Parse(strResponse);
                    errors = jsonResponse?["errors"] ?? new JsonObject();
                }
                catch (Exception ex)
                {

                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving employee data: {ex.Message}");
        }
    }
}

